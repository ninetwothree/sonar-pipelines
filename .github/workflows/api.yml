on:
  workflow_call: 
    secrets:
      SONAR_TOKEN:
        description: 'Token for SonarQube authentication'
        required: true
    inputs:
      SONAR_DOMAIN_NAME:
          description: 'Domain name of the SonarQube server'
          required: true
          type: string
      FETCH_DEPTH:
          required: false
          default: 0
          type: number
      RUN_ESLINT:
          description: 'Flag to determine if ESLint should run'
          required: false
          default: true
          type: boolean
      NPM_CONFIG_LEGACY_PEER_DEPS:
          description: 'Flag to determine if --legacy-peer-deps should be added for install'
          required: false
          default: false
          type: boolean

        
name: Scan project with SonarQube scanner
jobs:
  run-sonar-checks:
    name: Run sonar checks
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: ${{ inputs.FETCH_DEPTH }}  
    - name: Generate sonar project name
      run: |
        printf "\nsonar.projectKey = ${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}" | sed s/'\/'/'-'/g >> sonar-project.properties
    
    - name: Check with eslint
      if: ${{ inputs.RUN_ESLINT }}
      env:
        NPM_CONFIG_LEGACY_PEER_DEPS: ${{ inputs.NPM_CONFIG_LEGACY_PEER_DEPS }}
      run: |
        npm install
        bash -c 'npm run lint-exporter || :'
    
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@v4.2.1
      with:
        args: >
          -Dhttp.proxyPort=3129
          -Dhttps.proxyPort=3129
          -Dhttp.proxyHost=${{ inputs.SONAR_DOMAIN_NAME }}
          -Dhttps.proxyHost=${{ inputs.SONAR_DOMAIN_NAME }}
      env:
        HTTP_PROXY: https://${{ inputs.SONAR_DOMAIN_NAME }}:3129
        HTTPS_PROXY: https://${{ inputs.SONAR_DOMAIN_NAME }}:3129
        NO_PROXY: localhost,127.0.0.1
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://${{ inputs.SONAR_DOMAIN_NAME }}

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      continue-on-error: true 
      uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       SONAR_HOST_URL: https://${{ inputs.SONAR_DOMAIN_NAME }}
    
    - name: Get detailed SonarQube issues
      if: steps.sonarqube-quality-gate-check.outcome == 'failure'
      continue-on-error: true 
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        PROJECT_KEY=$(echo "${{ github.repository_owner }}-${{ github.event.repository.name }}-${{ github.head_ref || github.ref_name }}" | sed 's/\//-/g')
        curl -s -u $SONAR_TOKEN: "https://${{ vars.SONAR_DOMAIN_NAME }}/api/issues/search?componentKeys=${PROJECT_KEY}&resolved=no&ps=500" > sonar_issues.json

        echo "### Detailed SonarQube Issues" >> $GITHUB_STEP_SUMMARY
        echo "File | Error type | Description" >> $GITHUB_STEP_SUMMARY
        echo "--- | --- | ---" >> $GITHUB_STEP_SUMMARY
        jq -r '.issues[] | "\(.component) | \(.severity) | \(.message)"' sonar_issues.json | tee sonar_issues_summary.txt | tee -a $GITHUB_STEP_SUMMARY

        echo "Detailed issues summary:"
        cat sonar_issues_summary.txt